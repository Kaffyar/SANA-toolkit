from flask import Blueprint, render_template, request, jsonify
import dns.resolver
import dns.zone
import dns.query
import dns.rdatatype
import socket
import requests
import re
import logging
import time
import json
import os
from datetime import datetime
from routes.scan_history_model import scan_history_db

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create blueprint
dns_recon_bp = Blueprint('dns_recon', __name__)

# Helper functions for counter management
def initialize_dns_counters():
    """Initialize DNS-specific counter files if they don't exist"""
    try:
        # Initialize DNS queries counter
        if not os.path.exists('dns_queries_counter.txt'):
            with open('dns_queries_counter.txt', 'w') as f:
                f.write('0')
        
        # Initialize records found counter  
        if not os.path.exists('dns_records_counter.txt'):
            with open('dns_records_counter.txt', 'w') as f:
                f.write('0')
                
        logger.info("DNS counter files initialized")
    except Exception as e:
        logger.error(f"Failed to initialize DNS counters: {str(e)}")

def get_dns_queries_count():
    """Get total number of DNS queries performed"""
    try:
        counter_file = 'dns_queries_counter.txt'
        if os.path.exists(counter_file):
            with open(counter_file, 'r') as f:
                return int(f.read().strip() or 0)
        else:
            return 0
    except:
        return 0

def increment_dns_queries_counter():
    """Increment the DNS queries counter"""
    try:
        current_count = get_dns_queries_count()
        new_count = current_count + 1
        
        with open('dns_queries_counter.txt', 'w') as f:
            f.write(str(new_count))
        
        logger.info(f"DNS queries counter incremented to: {new_count}")
        return new_count
    except Exception as e:
        logger.error(f"Failed to increment DNS queries counter: {str(e)}")
        return 0

def get_dns_records_count():
    """Get total DNS records found"""
    try:
        counter_file = 'dns_records_counter.txt'
        if os.path.exists(counter_file):
            with open(counter_file, 'r') as f:
                return int(f.read().strip() or 0)
        else:
            return 0
    except:
        return 0

def increment_dns_records_counter(count=1):
    """Increment DNS records counter by specified amount"""
    try:
        current_count = get_dns_records_count()
        new_count = current_count + count
        
        with open('dns_records_counter.txt', 'w') as f:
            f.write(str(new_count))
        
        logger.info(f"DNS records counter incremented by {count} to: {new_count}")
        return new_count
    except Exception as e:
        logger.error(f"Failed to increment DNS records counter: {str(e)}")
        return 0

# Validation functions
def is_valid_domain(domain):
    """Validate domain name format"""
    if not domain:
        return False
    
    # Remove protocol if present
    domain = re.sub(r'^https?://', '', domain)
    domain = domain.split('/')[0]  # Remove path
    domain = domain.split(':')[0]  # Remove port
    
    # Domain regex pattern
    domain_pattern = re.compile(
        r'^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$'
    )
    
    return domain_pattern.match(domain) is not None

def sanitize_domain(domain):
    """Sanitize and normalize domain input"""
    if not domain:
        return ""
    
    # Remove protocol
    domain = re.sub(r'^https?://', '', domain)
    
    # Remove www. prefix
    domain = re.sub(r'^www\.', '', domain)
    
    # Remove path and query parameters
    domain = domain.split('/')[0]
    domain = domain.split('?')[0]
    domain = domain.split('#')[0]
    domain = domain.split(':')[0]  # Remove port
    
    # Convert to lowercase
    domain = domain.lower().strip()
    
    return domain

def contains_malicious_domain_input(domain):
    """Check for malicious domain input patterns"""
    malicious_patterns = [
        r'[;&|`$()]',      # Command injection
        r'\.\./',          # Directory traversal
        r'<script',        # XSS attempts
        r'javascript:',    # JavaScript injection
        r'data:',          # Data URI
        r'file:',          # File protocol
    ]
    
    for pattern in malicious_patterns:
        if re.search(pattern, domain, re.IGNORECASE):
            return True
    return False

# Core DNS lookup functions
def perform_dns_lookup(domain, record_type):
    """Perform DNS lookup for specified record type"""
    try:
        resolver = dns.resolver.Resolver()
        resolver.timeout = 10
        resolver.lifetime = 30
        
        # Map common record types
        record_type_map = {
            'A': dns.rdatatype.A,
            'AAAA': dns.rdatatype.AAAA,
            'MX': dns.rdatatype.MX,
            'NS': dns.rdatatype.NS,
            'TXT': dns.rdatatype.TXT,
            'CNAME': dns.rdatatype.CNAME,
            'SOA': dns.rdatatype.SOA,
            'PTR': dns.rdatatype.PTR
        }
        
        if record_type not in record_type_map:
            return {'error': f'Unsupported record type: {record_type}'}
        
        answers = resolver.resolve(domain, record_type_map[record_type])
        records = []
        
        for answer in answers:
            if record_type == 'A':
                records.append({
                    'type': 'A',
                    'value': str(answer),
                    'ttl': answers.ttl
                })
            elif record_type == 'AAAA':
                records.append({
                    'type': 'AAAA',
                    'value': str(answer),
                    'ttl': answers.ttl
                })
            elif record_type == 'MX':
                records.append({
                    'type': 'MX',
                    'priority': answer.preference,
                    'value': str(answer.exchange),
                    'ttl': answers.ttl
                })
            elif record_type == 'NS':
                records.append({
                    'type': 'NS',
                    'value': str(answer),
                    'ttl': answers.ttl
                })
            elif record_type == 'TXT':
                records.append({
                    'type': 'TXT',
                    'value': ' '.join([part.decode('utf-8') if isinstance(part, bytes) else str(part) for part in answer.strings]),
                    'ttl': answers.ttl
                })
            elif record_type == 'CNAME':
                records.append({
                    'type': 'CNAME',
                    'value': str(answer),
                    'ttl': answers.ttl
                })
            elif record_type == 'SOA':
                records.append({
                    'type': 'SOA',
                    'mname': str(answer.mname),
                    'rname': str(answer.rname),
                    'serial': answer.serial,
                    'refresh': answer.refresh,
                    'retry': answer.retry,
                    'expire': answer.expire,
                    'minimum': answer.minimum,
                    'ttl': answers.ttl
                })
        
        return {'records': records, 'count': len(records)}
        
    except dns.resolver.NXDOMAIN:
        return {'error': 'Domain does not exist'}
    except dns.resolver.NoAnswer:
        return {'records': [], 'count': 0, 'message': f'No {record_type} records found'}
    except dns.resolver.Timeout:
        return {'error': 'DNS query timeout'}
    except Exception as e:
        logger.error(f"DNS lookup error for {domain} ({record_type}): {str(e)}")
        return {'error': f'DNS lookup failed: {str(e)}'}

def perform_reverse_dns(ip_address):
    """Perform reverse DNS lookup"""
    try:
        resolver = dns.resolver.Resolver()
        resolver.timeout = 10
        
        # Convert IP to reverse DNS format
        if ':' in ip_address:  # IPv6
            reversed_ip = dns.reversename.from_address(ip_address)
        else:  # IPv4
            reversed_ip = dns.reversename.from_address(ip_address)
        
        answers = resolver.resolve(reversed_ip, 'PTR')
        records = []
        
        for answer in answers:
            records.append({
                'type': 'PTR',
                'ip': ip_address,
                'hostname': str(answer),
                'ttl': answers.ttl
            })
        
        return {'records': records, 'count': len(records)}
        
    except Exception as e:
        logger.error(f"Reverse DNS lookup error for {ip_address}: {str(e)}")
        return {'error': f'Reverse DNS lookup failed: {str(e)}'}

def get_ip_geolocation(ip_address):
    """Get geolocation information for IP address"""
    try:
        # Use ip-api.com for geolocation (free service)
        response = requests.get(f'http://ip-api.com/json/{ip_address}', timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('status') == 'success':
                return {
                    'ip': ip_address,
                    'country': data.get('country', 'Unknown'),
                    'country_code': data.get('countryCode', 'Unknown'),
                    'region': data.get('regionName', 'Unknown'),
                    'city': data.get('city', 'Unknown'),
                    'zip': data.get('zip', 'Unknown'),
                    'lat': data.get('lat', 0),
                    'lon': data.get('lon', 0),
                    'timezone': data.get('timezone', 'Unknown'),
                    'isp': data.get('isp', 'Unknown'),
                    'org': data.get('org', 'Unknown'),
                    'as': data.get('as', 'Unknown')
                }
            else:
                return {'error': 'Geolocation service failed'}
        else:
            return {'error': 'Geolocation service unavailable'}
            
    except Exception as e:
        logger.error(f"Geolocation lookup error for {ip_address}: {str(e)}")
        return {'error': f'Geolocation lookup failed: {str(e)}'}

def attempt_zone_transfer(domain):
    """Attempt DNS zone transfer"""
    try:
        # Get NS records first
        ns_result = perform_dns_lookup(domain, 'NS')
        if 'error' in ns_result:
            return {'error': 'Could not retrieve nameservers'}
        
        zone_transfers = []
        for ns_record in ns_result.get('records', []):
            nameserver = ns_record['value']
            
            try:
                # Attempt zone transfer
                zone = dns.zone.from_xfr(dns.query.xfr(nameserver, domain, timeout=10))
                
                records = []
                for name, node in zone.nodes.items():
                    for rdataset in node.rdatasets:
                        for rdata in rdataset:
                            records.append({
                                'name': str(name),
                                'type': dns.rdatatype.to_text(rdataset.rdtype),
                                'value': str(rdata),
                                'ttl': rdataset.ttl
                            })
                
                zone_transfers.append({
                    'nameserver': nameserver,
                    'success': True,
                    'records': records,
                    'count': len(records)
                })
                
            except Exception as e:
                zone_transfers.append({
                    'nameserver': nameserver,
                    'success': False,
                    'error': str(e)
                })
        
        return {'zone_transfers': zone_transfers}
        
    except Exception as e:
        logger.error(f"Zone transfer error for {domain}: {str(e)}")
        return {'error': f'Zone transfer failed: {str(e)}'}

def perform_subdomain_enumeration(domain, wordlist=None):
    """Perform basic subdomain enumeration"""
    try:
        # Common subdomains to check
        if wordlist is None:
            wordlist = [
                'www', 'mail', 'email', 'webmail', 'smtp', 'pop', 'imap',
                'ftp', 'sftp', 'ssh', 'www2', 'blog', 'forum', 'shop',
                'store', 'admin', 'administrator', 'root', 'test', 'dev',
                'development', 'staging', 'api', 'app', 'mobile', 'cdn',
                'static', 'media', 'images', 'img', 'css', 'js', 'assets',
                'files', 'downloads', 'docs', 'support', 'help', 'kb',
                'wiki', 'news', 'portal', 'intranet', 'extranet', 'vpn',
                'remote', 'citrix', 'owa', 'webconf', 'video', 'voice'
            ]
        
        found_subdomains = []
        
        for subdomain in wordlist:
            full_domain = f"{subdomain}.{domain}"
            
            try:
                # Try A record lookup
                result = perform_dns_lookup(full_domain, 'A')
                if 'records' in result and result['records']:
                    found_subdomains.append({
                        'subdomain': full_domain,
                        'records': result['records']
                    })
                    
            except Exception:
                continue  # Subdomain doesn't exist
        
        return {
            'subdomains': found_subdomains,
            'count': len(found_subdomains),
            'total_checked': len(wordlist)
        }
        
    except Exception as e:
        logger.error(f"Subdomain enumeration error for {domain}: {str(e)}")
        return {'error': f'Subdomain enumeration failed: {str(e)}'}

def perform_comprehensive_dns_recon(domain, options=None):
    """Perform comprehensive DNS reconnaissance"""
    try:
        if options is None:
            options = {
                'include_geolocation': True,
                'include_reverse_dns': True,
                'include_zone_transfer': False,
                'include_subdomain_enum': False
            }
        
        results = {
            'domain': domain,
            'timestamp': datetime.now().isoformat(),
            'records': {},
            'summary': {
                'total_records': 0,
                'record_types_found': [],
                'ips_found': [],
                'nameservers': [],
                'mx_servers': []
            }
        }
        
        # Standard DNS record types to query
        record_types = ['A', 'AAAA', 'MX', 'NS', 'TXT', 'CNAME', 'SOA']
        
        total_records_found = 0
        
        for record_type in record_types:
            logger.info(f"Querying {record_type} records for {domain}")
            result = perform_dns_lookup(domain, record_type)
            
            if 'records' in result and result['records']:
                results['records'][record_type] = result['records']
                results['summary']['record_types_found'].append(record_type)
                total_records_found += len(result['records'])
                
                # Extract IPs for geolocation
                if record_type in ['A', 'AAAA']:
                    for record in result['records']:
                        if record['value'] not in results['summary']['ips_found']:
                            results['summary']['ips_found'].append(record['value'])
                
                # Extract nameservers
                elif record_type == 'NS':
                    for record in result['records']:
                        results['summary']['nameservers'].append(record['value'])
                
                # Extract MX servers
                elif record_type == 'MX':
                    for record in result['records']:
                        results['summary']['mx_servers'].append(record['value'])
            
            elif 'error' not in result:
                results['records'][record_type] = []
        
        results['summary']['total_records'] = total_records_found
        
        # Perform geolocation for found IPs
        if options.get('include_geolocation', True) and results['summary']['ips_found']:
            results['geolocation'] = {}
            for ip in results['summary']['ips_found']:
                geo_result = get_ip_geolocation(ip)
                if 'error' not in geo_result:
                    results['geolocation'][ip] = geo_result
        
        # Perform reverse DNS
        if options.get('include_reverse_dns', True) and results['summary']['ips_found']:
            results['reverse_dns'] = {}
            for ip in results['summary']['ips_found']:
                reverse_result = perform_reverse_dns(ip)
                if 'records' in reverse_result and reverse_result['records']:
                    results['reverse_dns'][ip] = reverse_result['records']
        
        # Attempt zone transfer
        if options.get('include_zone_transfer', False):
            zone_result = attempt_zone_transfer(domain)
            if 'zone_transfers' in zone_result:
                results['zone_transfer'] = zone_result['zone_transfers']
        
        # Subdomain enumeration
        if options.get('include_subdomain_enum', False):
            subdomain_result = perform_subdomain_enumeration(domain)
            if 'subdomains' in subdomain_result:
                results['subdomains'] = subdomain_result
                total_records_found += subdomain_result.get('count', 0)
        
        # Update counters
        increment_dns_records_counter(total_records_found)
        
        return results
        
    except Exception as e:
        logger.error(f"Comprehensive DNS recon error for {domain}: {str(e)}")
        return {'error': f'DNS reconnaissance failed: {str(e)}'}

# Routes
@dns_recon_bp.route('/dns-recon')
def dns_recon_page():
    """DNS reconnaissance main page"""
    initialize_dns_counters()
    return render_template('dns_recon.html')

@dns_recon_bp.route('/dns-recon-analyze', methods=['POST'])
def analyze_domain():
    """Analyze domain with DNS reconnaissance"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'status': 'error',
                'message': 'No data provided'
            }), 400
        
        domain = data.get('domain', '').strip()
        options = data.get('options', {})
        
        # Validation
        if not domain:
            return jsonify({
                'status': 'error',
                'message': 'Domain is required'
            }), 400
        
        # Sanitize domain
        domain = sanitize_domain(domain)
        
        if not domain:
            return jsonify({
                'status': 'error',
                'message': 'Invalid domain format'
            }), 400
        
        # Security check
        if contains_malicious_domain_input(domain):
            return jsonify({
                'status': 'error',
                'message': 'Invalid characters in domain'
            }), 400
        
        # Validate domain format
        if not is_valid_domain(domain):
            return jsonify({
                'status': 'error',
                'message': 'Invalid domain format'
            }), 400
        
        # Increment query counter
        increment_dns_queries_counter()
        
        logger.info(f"Starting DNS reconnaissance for domain: {domain}")
        
        # Perform comprehensive DNS reconnaissance
        results = perform_comprehensive_dns_recon(domain, options)
        
        if 'error' in results:
            return jsonify({
                'status': 'error',
                'message': results['error']
            }), 500
        
        # Save to scan history
        try:
            scan_history_db.add_scan(
                target=domain,
                scan_type='DNS Reconnaissance',
                timing_template='N/A',
                port_range='N/A',
                custom_args=json.dumps(options),
                nmap_command=f'DNS recon for {domain}',
                results=json.dumps(results),
                raw_output=json.dumps(results, indent=2)
            )
        except Exception as e:
            logger.error(f"Failed to save DNS scan to history: {str(e)}")
        
        return jsonify({
            'status': 'success',
            'domain': domain,
            'results': results,
            'summary': {
                'total_records': results['summary']['total_records'],
                'record_types': results['summary']['record_types_found'],
                'ips_found': len(results['summary']['ips_found']),
                'analysis_time': 'Complete'
            }
        })
        
    except Exception as e:
        logger.error(f"DNS analysis error: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Analysis failed: {str(e)}'
        }), 500

@dns_recon_bp.route('/dns-dashboard-stats')
def get_dns_dashboard_stats():
    """Get DNS reconnaissance dashboard statistics"""
    try:
        total_queries = get_dns_queries_count()
        total_records = get_dns_records_count()
        
        # Get recent DNS scans from history
        try:
            recent_scans = scan_history_db.get_scan_history(limit=10)
            dns_scans = [scan for scan in recent_scans if scan.get('scan_type') == 'DNS Reconnaissance']
            recent_dns_scans = len(dns_scans)
        except Exception:
            recent_dns_scans = 0
        
        return jsonify({
            'status': 'success',
            'stats': {
                'total_dns_queries': total_queries,
                'total_records_found': total_records,
                'recent_scans': recent_dns_scans,
                'active_resolvers': 8,  # Common DNS resolvers
                'last_updated': int(time.time())
            }
        })
        
    except Exception as e:
        logger.error(f"DNS dashboard stats error: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Failed to get stats: {str(e)}'
        }), 500

@dns_recon_bp.route('/dns-quick-lookup', methods=['POST'])
def quick_dns_lookup():
    """Quick DNS lookup for specific record type"""
    try:
        data = request.get_json()
        
        domain = data.get('domain', '').strip()
        record_type = data.get('record_type', 'A').upper()
        
        if not domain:
            return jsonify({
                'status': 'error',
                'message': 'Domain is required'
            }), 400
        
        # Sanitize and validate
        domain = sanitize_domain(domain)
        
        if not is_valid_domain(domain):
            return jsonify({
                'status': 'error',
                'message': 'Invalid domain format'
            }), 400
        
        # Perform specific record lookup
        result = perform_dns_lookup(domain, record_type)
        
        if 'error' in result:
            return jsonify({
                'status': 'error',
                'message': result['error']
            }), 400
        
        return jsonify({
            'status': 'success',
            'domain': domain,
            'record_type': record_type,
            'records': result.get('records', []),
            'count': result.get('count', 0)
        })
        
    except Exception as e:
        logger.error(f"Quick DNS lookup error: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Lookup failed: {str(e)}'
        }), 500

# Error handlers
@dns_recon_bp.errorhandler(404)
def not_found_error(error):
    return jsonify({
        'status': 'error',
        'message': 'DNS endpoint not found'
    }), 404

@dns_recon_bp.errorhandler(429)
def rate_limit_error(error):
    return jsonify({
        'status': 'error',
        'message': 'Rate limit exceeded for DNS queries'
    }), 429

@dns_recon_bp.errorhandler(500)
def internal_error(error):
    return jsonify({
        'status': 'error',
        'message': 'Internal DNS service error'
    }), 500

# Initialize counters on module load
initialize_dns_counters()
